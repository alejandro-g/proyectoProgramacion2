/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Diego
 */
public class LogInFrame extends javax.swing.JFrame {

    /**
     * Creates new formf LogInFrame
     */
    public LogInFrame() {
        initComponents();

        //escritura de archivo
        //*****************************************************************//
        //escritura de admin **debe hacerse solo una vez
        /*User adminUser = new User("admin", "admin", "admin");
        try {
            fw = new FileOutputStream(usersFile);
            bw = new ObjectOutputStream(fw);
            bw.writeObject(adminUser);
            bw.flush();
        } catch (Exception e) {
        } finally {
            try {
                bw.close();
                fw.close();
            } catch (Exception e) {
            }
        }
        System.out.println("se escribio admin");*/
        //*****************************************************************//
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Desktop = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jb_editor = new javax.swing.JButton();
        jb_visor = new javax.swing.JButton();
        jb_cmd = new javax.swing.JButton();
        jb_player = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jb_userCreated = new javax.swing.JButton();
        jb_documents = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        CreateUser = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        tf_userCreated = new javax.swing.JTextField();
        pf_passwordCreated = new javax.swing.JPasswordField();
        jb_crear = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        Editor = new javax.swing.JDialog();
        visorImagenes = new javax.swing.JDialog();
        Consola = new javax.swing.JDialog();
        MusicPlayer = new javax.swing.JDialog();
        Calendario = new javax.swing.JDialog();
        Mensajero = new javax.swing.JDialog();
        Documents = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_fileSystem = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tf_user = new javax.swing.JTextField();
        pf_password = new javax.swing.JPasswordField();
        jb_logIn = new javax.swing.JButton();
        jb_exit = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        Desktop.setIconImage(null);
        Desktop.setIconImages(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jb_editor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/notepad.png"))); // NOI18N
        jb_editor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_editorMouseClicked(evt);
            }
        });

        jb_visor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/imagenes (2).png"))); // NOI18N
        jb_visor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_visorMouseClicked(evt);
            }
        });

        jb_cmd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/cmd.png"))); // NOI18N
        jb_cmd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_cmdMouseClicked(evt);
            }
        });

        jb_player.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/player.png"))); // NOI18N
        jb_player.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_playerMouseClicked(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/calendario.png"))); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/mensajes.png"))); // NOI18N
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jb_userCreated.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/creatUser.png"))); // NOI18N
        jb_userCreated.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_userCreatedMouseClicked(evt);
            }
        });

        jb_documents.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/documents.png"))); // NOI18N
        jb_documents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_documentsMouseClicked(evt);
            }
        });

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/exit.png"))); // NOI18N
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jb_editor, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jb_visor, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jb_cmd, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jb_player, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jb_documents, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jb_userCreated, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jb_editor, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
            .addComponent(jb_visor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jb_cmd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jb_player, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jb_userCreated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jb_documents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/TaskBarIcons/Nature-Wallpapers-HD.jpg"))); // NOI18N

        javax.swing.GroupLayout DesktopLayout = new javax.swing.GroupLayout(Desktop.getContentPane());
        Desktop.getContentPane().setLayout(DesktopLayout);
        DesktopLayout.setHorizontalGroup(
            DesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(DesktopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DesktopLayout.setVerticalGroup(
            DesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DesktopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        CreateUser.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel4.setText("Crear Usuario");

        jLabel5.setText("Usuario: ");

        jLabel6.setText("Password");

        jb_crear.setText("Crear");
        jb_crear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_crearMouseClicked(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout CreateUserLayout = new javax.swing.GroupLayout(CreateUser.getContentPane());
        CreateUser.getContentPane().setLayout(CreateUserLayout);
        CreateUserLayout.setHorizontalGroup(
            CreateUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateUserLayout.createSequentialGroup()
                .addGroup(CreateUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CreateUserLayout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addGroup(CreateUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(68, 68, 68)
                        .addGroup(CreateUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tf_userCreated)
                            .addComponent(pf_passwordCreated, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)))
                    .addGroup(CreateUserLayout.createSequentialGroup()
                        .addGap(249, 249, 249)
                        .addComponent(jb_crear, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(CreateUserLayout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(jLabel4)))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        CreateUserLayout.setVerticalGroup(
            CreateUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CreateUserLayout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jLabel4)
                .addGap(43, 43, 43)
                .addGroup(CreateUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tf_userCreated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(CreateUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(pf_passwordCreated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(85, 85, 85)
                .addGroup(CreateUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_crear)
                    .addComponent(jButton2))
                .addContainerGap(173, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout EditorLayout = new javax.swing.GroupLayout(Editor.getContentPane());
        Editor.getContentPane().setLayout(EditorLayout);
        EditorLayout.setHorizontalGroup(
            EditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        EditorLayout.setVerticalGroup(
            EditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout visorImagenesLayout = new javax.swing.GroupLayout(visorImagenes.getContentPane());
        visorImagenes.getContentPane().setLayout(visorImagenesLayout);
        visorImagenesLayout.setHorizontalGroup(
            visorImagenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        visorImagenesLayout.setVerticalGroup(
            visorImagenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout ConsolaLayout = new javax.swing.GroupLayout(Consola.getContentPane());
        Consola.getContentPane().setLayout(ConsolaLayout);
        ConsolaLayout.setHorizontalGroup(
            ConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        ConsolaLayout.setVerticalGroup(
            ConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MusicPlayerLayout = new javax.swing.GroupLayout(MusicPlayer.getContentPane());
        MusicPlayer.getContentPane().setLayout(MusicPlayerLayout);
        MusicPlayerLayout.setHorizontalGroup(
            MusicPlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        MusicPlayerLayout.setVerticalGroup(
            MusicPlayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CalendarioLayout = new javax.swing.GroupLayout(Calendario.getContentPane());
        Calendario.getContentPane().setLayout(CalendarioLayout);
        CalendarioLayout.setHorizontalGroup(
            CalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        CalendarioLayout.setVerticalGroup(
            CalendarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout MensajeroLayout = new javax.swing.GroupLayout(Mensajero.getContentPane());
        Mensajero.getContentPane().setLayout(MensajeroLayout);
        MensajeroLayout.setHorizontalGroup(
            MensajeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        MensajeroLayout.setVerticalGroup(
            MensajeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jt_fileSystem.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jt_fileSystem);

        javax.swing.GroupLayout DocumentsLayout = new javax.swing.GroupLayout(Documents.getContentPane());
        Documents.getContentPane().setLayout(DocumentsLayout);
        DocumentsLayout.setHorizontalGroup(
            DocumentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DocumentsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 875, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        DocumentsLayout.setVerticalGroup(
            DocumentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DocumentsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Log In");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("User Name: ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Password:");

        jb_logIn.setText("Log in");
        jb_logIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_logInActionPerformed(evt);
            }
        });

        jb_exit.setText("Shut down");
        jb_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_exitActionPerformed(evt);
            }
        });

        jMenu1.setText("Log on to Windows");
        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(299, 299, 299)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tf_user)
                            .addComponent(pf_password, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(jb_logIn)
                        .addGap(136, 136, 136)
                        .addComponent(jb_exit)))
                .addContainerGap(289, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tf_user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(pf_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_logIn)
                    .addComponent(jb_exit))
                .addContainerGap(125, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jb_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jb_exitActionPerformed

    private void jb_logInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_logInActionPerformed
        //recieves data from user
        boolean foundUser = false;
        boolean foundPassword = false;
        String user = tf_user.getText();
        String password = pf_password.getText();

        if (user.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El ususario/contraseña esta vacio");
        } else {
            try {
                //ArrayList<User> usersList = new ArrayList();
                User temp;
                if (usersFile.exists()) {
                    try {
                        entrada = new FileInputStream(usersFile);
                        objeto = new ObjectInputStream(entrada);
                        while ((temp = (User) objeto.readObject()) != null) {
                            System.out.println(temp.getName());
                            if (temp.getName().equalsIgnoreCase(user)) {
                                foundUser = true;
                                if (temp.getPassword().equals(password)) {
                                    foundPassword = true;
                                    currentUser = temp;
                                    JOptionPane.showMessageDialog(this, "Bienvenido " + user);
                                    //open desktop JDialog                      
                                    if (currentUser.getType().equalsIgnoreCase("normal")) {
                                        jb_userCreated.setVisible(false);
                                    } else {
                                        jb_userCreated.setVisible(true);
                                    }

                                    openDialog(Desktop);
                                    break;

                                } else {
                                    foundPassword = false;
                                    System.out.println("Password Incorrecta");
                                }
                            } else {
                                foundUser = false;
                                System.out.println("User Incorrecto");
                            }
                        }
                    } catch (EOFException e) {
                        //econtro el final del archivo
                        if (foundPassword) {
                            System.out.println("Password Correcta");
                        }
                        if (foundUser) {
                            System.out.println("Usuario Correcto");
                        }
                        if ((!foundPassword || !foundUser)) {
                            JOptionPane.showMessageDialog(this, "Error! El usuario o contraseña son incorrectos");
                        }

                    } finally {
                        objeto.close();
                        entrada.close();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jb_logInActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        //boton cerrar ventana
        CreateUser.dispose();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jb_crearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_crearMouseClicked
        //boton para crear usuario
        //lectura del archivo
        ArrayList<User> usersList = new ArrayList();
        try {
            User temp;
            if (usersFile.exists()) {
                try {
                    entrada = new FileInputStream(usersFile);
                    objeto = new ObjectInputStream(entrada);
                    while ((temp = (User) objeto.readObject()) != null) {
                        System.out.println("pass");
                        usersList.add(temp);
                    }
                } catch (EOFException e) {
                    //econtro el final del archivo
                } finally {
                    objeto.close();
                    entrada.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        String userCreated = tf_userCreated.getText();
        String passwordCreated = pf_passwordCreated.getText();
        if (userCreated.isEmpty() || passwordCreated.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El usuario/contraseña estan vacios");
            tf_userCreated.setText("");
            pf_passwordCreated.setText("");
        } else {
            //construccion del objeto usuario
            ArrayList <File> documentsFiles = new ArrayList();
            documentsFiles.add(new File("doc1"));
            documentsFiles.add(new File("doc2"));
            documentsFiles.add(new File("doc3"));
            
            ArrayList <File> imagesFiles = new ArrayList();
            imagesFiles.add(new File("img1"));
            imagesFiles.add(new File("img2"));
            
            ArrayList <File> musicFiles = new ArrayList();
            musicFiles.add(new File("song1"));
            musicFiles.add(new File("song2"));
            musicFiles.add(new File("song3"));
            musicFiles.add(new File("song4"));
            
            ArrayList <File> calendarFiles = new ArrayList();
            
            ArrayList <File> messagesFiles = new ArrayList();
            messagesFiles.add(new File("msg1"));
            messagesFiles.add(new File("msg2"));
            messagesFiles.add(new File("msg3"));
            
            ArrayList <File> mailFiles = new ArrayList();

            
            User createdUser = new User(userCreated, passwordCreated, "normal");
            createdUser.addFolderToFolderList(new FolderClass(createdUser.getName(), "Mis Documentos"));
            createdUser.addFilesToFolder(documentsFiles, createdUser.getFolderslist().get(0));
            
            createdUser.addFolderToFolderList(new FolderClass(createdUser.getName(), "Mis Imagenes"));
            createdUser.addFilesToFolder(imagesFiles, createdUser.getFolderslist().get(1));
            
            createdUser.addFolderToFolderList(new FolderClass(createdUser.getName(), "Mi Musica"));
            createdUser.addFilesToFolder(musicFiles, createdUser.getFolderslist().get(2));
            
            createdUser.addFolderToFolderList(new FolderClass(createdUser.getName(), "Mi Calendario"));
            createdUser.addFilesToFolder(calendarFiles, createdUser.getFolderslist().get(3));
            
            createdUser.addFolderToFolderList(new FolderClass(createdUser.getName(), "Mis Mensajes"));
            createdUser.addFilesToFolder(messagesFiles, createdUser.getFolderslist().get(4));
            
            createdUser.addFolderToFolderList(new FolderClass(createdUser.getName(), "Envio de Correo"));
            createdUser.addFilesToFolder(mailFiles, createdUser.getFolderslist().get(5));

            usersList.add(createdUser);

            //escritura de archivo
            try {
                fw = new FileOutputStream(usersFile);
                //primer copiarlo, despues agregarlo
                //el archivo binario sobreescribe no solo almacena
                bw = new ObjectOutputStream(fw);
                for (int i = 0; i < usersList.size(); i++) {
                    bw.writeObject(usersList.get(i));
                    bw.flush();
                }
            } catch (Exception e) {
            } finally {
                try {
                    bw.close();
                    fw.close();
                } catch (Exception e) {
                }
            }
            JOptionPane.showMessageDialog(this, "Usuario Creado!");
        }
    }//GEN-LAST:event_jb_crearMouseClicked

    private void jb_userCreatedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_userCreatedMouseClicked
        //boton que abre ventana para crear usuario
        openDialog(CreateUser);
    }//GEN-LAST:event_jb_userCreatedMouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        Desktop.dispose();
    }//GEN-LAST:event_jButton5MouseClicked

    private void jb_editorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_editorMouseClicked
        openDialog(Editor);
    }//GEN-LAST:event_jb_editorMouseClicked

    private void jb_visorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_visorMouseClicked
        openDialog(visorImagenes);
    }//GEN-LAST:event_jb_visorMouseClicked

    private void jb_cmdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_cmdMouseClicked
        openDialog(Consola);
    }//GEN-LAST:event_jb_cmdMouseClicked

    private void jb_playerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_playerMouseClicked
        openDialog(MusicPlayer);
    }//GEN-LAST:event_jb_playerMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        openDialog(Calendario);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        openDialog(Mensajero);
    }//GEN-LAST:event_jButton3MouseClicked

    private void jb_documentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_documentsMouseClicked
    if (currentUser.getType().equalsIgnoreCase("normal")){
        //user is not admin, should only see his filesystem
        DefaultTreeModel m = (DefaultTreeModel) jt_fileSystem.getModel();
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) m.getRoot(); //siempre empieza a recorrer desde su nodo raiz, se hace para poder recorrerla
        DefaultMutableTreeNode nodoZ = new DefaultMutableTreeNode("Z:");
        DefaultMutableTreeNode nodo_Documents = new DefaultMutableTreeNode("Mis Documentos");
        for (int i = 0; i < currentUser.getFolderslist().size(); i++) {
            if (currentUser.getFolderslist().get(i).getName().equalsIgnoreCase("Mis Documentos")){
                ArrayList <File> files = new ArrayList();
                files = currentUser.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < currentUser.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Documents.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Documents);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Images = new DefaultMutableTreeNode("Mis Imagenes");
        for (int i = 0; i < currentUser.getFolderslist().size(); i++) {
            if (currentUser.getFolderslist().get(i).getName().equalsIgnoreCase("Mis Imagenes")){
                ArrayList <File> files = new ArrayList();
                files = currentUser.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < currentUser.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Images.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Images);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Music = new DefaultMutableTreeNode("Mi Musica");
        for (int i = 0; i < currentUser.getFolderslist().size(); i++) {
            if (currentUser.getFolderslist().get(i).getName().equalsIgnoreCase("Mi Musica")){
                ArrayList <File> files = new ArrayList();
                files = currentUser.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < currentUser.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Music.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Music);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Calendar = new DefaultMutableTreeNode("Mi Calendario");
        for (int i = 0; i < currentUser.getFolderslist().size(); i++) {
            if (currentUser.getFolderslist().get(i).getName().equalsIgnoreCase("Mi Calendario")){
                ArrayList <File> files = new ArrayList();
                files = currentUser.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < currentUser.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Calendar.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Calendar);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Messages = new DefaultMutableTreeNode("Mis Mensajes");
        for (int i = 0; i < currentUser.getFolderslist().size(); i++) {
            if (currentUser.getFolderslist().get(i).getName().equalsIgnoreCase("Mis Mensajes")){
                ArrayList <File> files = new ArrayList();
                files = currentUser.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < currentUser.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Messages.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Messages);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Mail = new DefaultMutableTreeNode("Mi Correo");
        for (int i = 0; i < currentUser.getFolderslist().size(); i++) {
            if (currentUser.getFolderslist().get(i).getName().equalsIgnoreCase("Envio de Correo")){
                ArrayList <File> files = new ArrayList();
                files = currentUser.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < currentUser.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Mail.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Mail);
        raiz.add(nodoZ);
        m.reload();
        openDialog(Documents);
        m.removeNodeFromParent(nodoZ);
    }else{
        //user is admin, should see all users file systems
        ArrayList<User> usersList = new ArrayList();
        try {
            User temp;
            if (usersFile.exists()) {
                try {
                    entrada = new FileInputStream(usersFile);
                    objeto = new ObjectInputStream(entrada);
                    while ((temp = (User) objeto.readObject()) != null) {
                        usersList.add(temp);
                    }
                } catch (EOFException e) {
                    //econtro el final del archivo
                } finally {
                    objeto.close();
                    entrada.close();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        DefaultTreeModel m = (DefaultTreeModel) jt_fileSystem.getModel();
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) m.getRoot(); //siempre empieza a recorrer desde su nodo raiz, se hace para poder recorrerla
        DefaultMutableTreeNode usersNodes = new DefaultMutableTreeNode("usuarios");
        for (int k = 0; k < usersList.size(); k++) {
            User user = usersList.get(k);
            DefaultMutableTreeNode nodoZ = new DefaultMutableTreeNode(user.getName()+"-Z:");
            DefaultMutableTreeNode nodo_Documents = new DefaultMutableTreeNode("Mis Documentos");
        for (int i = 0; i < user.getFolderslist().size(); i++) {
            if (user.getFolderslist().get(i).getName().equalsIgnoreCase("Mis Documentos")){
                ArrayList <File> files = new ArrayList();
                files = user.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < user.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Documents.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Documents);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Images = new DefaultMutableTreeNode("Mis Imagenes");
        for (int i = 0; i < user.getFolderslist().size(); i++) {
            if (user.getFolderslist().get(i).getName().equalsIgnoreCase("Mis Imagenes")){
                ArrayList <File> files = new ArrayList();
                files = user.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < user.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Images.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Images);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Music = new DefaultMutableTreeNode("Mi Musica");
        for (int i = 0; i < user.getFolderslist().size(); i++) {
            if (user.getFolderslist().get(i).getName().equalsIgnoreCase("Mi Musica")){
                ArrayList <File> files = new ArrayList();
                files = user.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < user.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Music.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Music);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Calendar = new DefaultMutableTreeNode("Mi Calendario");
        for (int i = 0; i < user.getFolderslist().size(); i++) {
            if (user.getFolderslist().get(i).getName().equalsIgnoreCase("Mi Calendario")){
                ArrayList <File> files = new ArrayList();
                files = user.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < user.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Calendar.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Calendar);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Messages = new DefaultMutableTreeNode("Mis Mensajes");
        for (int i = 0; i < user.getFolderslist().size(); i++) {
            if (user.getFolderslist().get(i).getName().equalsIgnoreCase("Mis Mensajes")){
                ArrayList <File> files = new ArrayList();
                files = user.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < user.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Messages.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Messages);
        raiz.add(nodoZ);
        
        DefaultMutableTreeNode nodo_Mail = new DefaultMutableTreeNode("Mi Correo");
        for (int i = 0; i < user.getFolderslist().size(); i++) {
            if (user.getFolderslist().get(i).getName().equalsIgnoreCase("Envio de Correo")){
                ArrayList <File> files = new ArrayList();
                files = user.getFolderslist().get(i).getFilesList();
                for (int j = 0; j < user.getFolderslist().get(i).getFilesList().size(); j++) {
                    File currentFile = files.get(j);
                    DefaultMutableTreeNode documentsFolderFileNode = new DefaultMutableTreeNode (new File(currentFile.getName()));
                    nodo_Mail.add(documentsFolderFileNode);
                }
            }
        }
        nodoZ.add(nodo_Mail);
        usersNodes.add(nodoZ);
        raiz.add(usersNodes);
        }
        m.reload();
        openDialog(Documents);
        m.removeNodeFromParent(usersNodes);
    }
    }//GEN-LAST:event_jb_documentsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LogInFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LogInFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LogInFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LogInFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LogInFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog Calendario;
    private javax.swing.JDialog Consola;
    private javax.swing.JDialog CreateUser;
    private javax.swing.JDialog Desktop;
    private javax.swing.JDialog Documents;
    private javax.swing.JDialog Editor;
    private javax.swing.JDialog Mensajero;
    private javax.swing.JDialog MusicPlayer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jb_cmd;
    private javax.swing.JButton jb_crear;
    private javax.swing.JButton jb_documents;
    private javax.swing.JButton jb_editor;
    private javax.swing.JButton jb_exit;
    private javax.swing.JButton jb_logIn;
    private javax.swing.JButton jb_player;
    private javax.swing.JButton jb_userCreated;
    private javax.swing.JButton jb_visor;
    private javax.swing.JTree jt_fileSystem;
    private javax.swing.JPasswordField pf_password;
    private javax.swing.JPasswordField pf_passwordCreated;
    private javax.swing.JTextField tf_user;
    private javax.swing.JTextField tf_userCreated;
    private javax.swing.JDialog visorImagenes;
    // End of variables declaration//GEN-END:variables

    boolean isFirstFileSystemLoad = true;
    
    FileOutputStream fw = null;
    ObjectOutputStream bw = null;
    FileInputStream entrada = null;
    ObjectInputStream objeto = null;

    File usersFile = new File("./usersFile.cbm");
    User currentUser;

    public void openDialog(JDialog Dialog) {

        Dialog.setModal(true);
        Dialog.setLocationRelativeTo(this);
        Dialog.pack();
        Dialog.setVisible(true);
    }
}
